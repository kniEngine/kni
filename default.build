<?xml version="1.0"?>
<project name="KNI Build Script" default="build" basedir=".">

  <description>The KNI automated build script.</description>

  <property name="os" value="${operating-system::get-platform(environment::get-operating-system())}" />
  <property name="msbuild15" value="C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\MSBuild\15.0\Bin\msbuild.exe" />
  <property name="msbuild17" value="C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Current\Bin\msbuild.exe" />

  <property name="nugetPath" value="C:\Program Files (x86)\NuGet3\nuget.exe" />
  <property name="nugetPackageVersion" value="3.10.9001" />
  
  <!-- Helper default target. -->
  <target   name="build" 
            description="Build, run tests, generate docs, and create installers." 
            depends="_clean,build_code,build_nuget,run_tests,build_docs,build_installer" />

  <!-- Clean the build output directories. -->
  <target name="_clean">
    <delete dir="${project::get-base-directory()}\Artifacts" />
    <delete dir="${project::get-base-directory()}\MonoGame.Framework\obj" />
    <delete dir="${project::get-base-directory()}\MonoGame.Framework.Content.Pipeline\obj" />
    
    <exec program="dotnet" commandline="build src\Xna.Framework\Xna.Framework.csproj /t:Clean /p:Configuration=Release" />
    <exec program="dotnet" commandline="build src\Xna.Framework.Content\Xna.Framework.Content.csproj /t:Clean /p:Configuration=Release" />
    <exec program="dotnet" commandline="build src\Xna.Framework.Graphics\Xna.Framework.Graphics.csproj /t:Clean /p:Configuration=Release" />
    <exec program="dotnet" commandline="build src\Xna.Framework.Audio\Xna.Framework.Audio.csproj /t:Clean /p:Configuration=Release" />
    <exec program="dotnet" commandline="build src\Xna.Framework.Media\Xna.Framework.Media.csproj /t:Clean /p:Configuration=Release" />
    <exec program="dotnet" commandline="build src\Xna.Framework.Design\Xna.Framework.Design.csproj /t:Clean /p:Configuration=Release" />
    
    <exec program="dotnet" commandline="build XNA.Framework.Blazor.sln /t:Clean /p:Configuration=Release" />
    
    <exec program="${msbuild17}" commandline="XNA.Framework.WindowsDX11.sln /t:Clean /p:Configuration=Release" />
    <exec program="dotnet" commandline="build MonoGame.Framework\XNA.Framework.Oculus.OvrDX11.csproj /t:Clean /p:Configuration=Release" />
    
    <exec program="${msbuild17}" commandline='XNA.Framework.UAP.sln /t:Clean /p:Configuration=Release /p:Platform="Any CPU"' />
    
    <exec program="${msbuild17}" commandline="XNA.Framework.DesktopGL.sln /t:Clean /p:Configuration=Release" />
    
    <exec program="${msbuild17}" commandline="XNA.Framework.Android.sln /t:Clean /p:Configuration=Release" />
    <exec program="${msbuild17}" commandline="XNA.Framework.Cardboard.sln /t:Clean /p:Configuration=Release" />
    
    <exec program="${msbuild17}" commandline="XNA.Framework.iOS.sln /t:Clean /p:Configuration=Release" />
    
  </target>
  
  <!-- Shortcut for building all valid target platforms -->
  <target name="build_code" description="Build all the projects.">
      
    <call target="build_framework"/>
    <call target="build_ref"/>
    <call target="build_blazorGL" />
    <call target="build_windows"/>
    <call target="build_windowsUAP10" />
    <call target="build_desktopGL"/>
    <call target="build_android" />
    <call target="build_cardboard" />
    <call target="build_ios" />
  </target>
 

  <target name="build_nuget" description="Build nuget packages.">
      
    <!-- <exec program="BuildNuget.bat" commandline="" /> -->

    <exec program="dotnet" commandline="pack src\Xna.Framework\Xna.Framework.csproj --output ${project::get-base-directory()}\Artifacts\Packages\ /t:Build /p:Configuration=Release" />
    <exec program="dotnet" commandline="pack src\Xna.Framework.Design\Xna.Framework.Design.csproj --output ${project::get-base-directory()}\Artifacts\Packages\ /t:Build /p:Configuration=Release" />
    <exec program="dotnet" commandline="pack MonoGame.Framework\Xna.Framework.Ref.csproj --output ${project::get-base-directory()}\Artifacts\Packages\ /t:Build /p:Configuration=Release" />

    <exec program="dotnet" commandline="pack src\Xna.Framework.Content.Pipeline\Xna.Framework.Content.Pipeline.csproj --output ${project::get-base-directory()}\Artifacts\Packages\ /t:Build /p:Configuration=Release" />
    <exec program="dotnet" commandline="pack src\Xna.Framework.Content.Pipeline.Audio\Xna.Framework.Content.Pipeline.Audio.csproj --output ${project::get-base-directory()}\Artifacts\Packages\ /t:Build /p:Configuration=Release" />
    <exec program="dotnet" commandline="pack src\Xna.Framework.Content.Pipeline.Graphics\Xna.Framework.Content.Pipeline.Graphics.csproj --output ${project::get-base-directory()}\Artifacts\Packages\ /t:Build /p:Configuration=Release" />
    <exec program="dotnet" commandline="pack src\Xna.Framework.Content.Pipeline.Media\Xna.Framework.Content.Pipeline.Media.csproj --output ${project::get-base-directory()}\Artifacts\Packages\ /t:Build /p:Configuration=Release" />

    <exec program="${nugetPath}" commandline="pack NuGetPackages/nkast.Xna.Framework.Content.Pipeline.Builder.nuspec	-OutputDirectory ${project::get-base-directory()}\Artifacts\Packages\  -BasePath .  -Version ${nugetPackageVersion}-rc  -Properties Configuration=Release" />

    <exec program="${nugetPath}" commandline="pack NuGetPackages/MonoGame.Framework.WindowsDX.nuspec		-OutputDirectory ${project::get-base-directory()}\Artifacts\Packages\  -BasePath .  -Version ${nugetPackageVersion}  -Properties Configuration=Release" />
    <exec program="${nugetPath}" commandline="pack NuGetPackages/MonoGame.Framework.WindowsUniversal.nuspec	-OutputDirectory ${project::get-base-directory()}\Artifacts\Packages\  -BasePath .  -Version ${nugetPackageVersion}  -Properties Configuration=Release" />
    <exec program="${nugetPath}" commandline="pack NuGetPackages/MonoGame.Framework.DesktopGL.nuspec		-OutputDirectory ${project::get-base-directory()}\Artifacts\Packages\  -BasePath .  -Version ${nugetPackageVersion}  -Properties Configuration=Release" />
    <exec program="${nugetPath}" commandline="pack NuGetPackages/MonoGame.Framework.Android.nuspec		-OutputDirectory ${project::get-base-directory()}\Artifacts\Packages\  -BasePath .  -Version ${nugetPackageVersion}  -Properties Configuration=Release" />
    <exec program="${nugetPath}" commandline="pack NuGetPackages/MonoGame.Framework.iOS.nuspec			-OutputDirectory ${project::get-base-directory()}\Artifacts\Packages\  -BasePath .  -Version ${nugetPackageVersion}  -Properties Configuration=Release" />

    <exec program="dotnet" commandline="pack XNA.Framework.Blazor.sln --output ${project::get-base-directory()}\Artifacts\Packages\ /t:Build /p:Configuration=Release" />
    <exec program="dotnet" commandline="pack MonoGame.Framework\XNA.Framework.Oculus.OvrDX11.csproj --output ${project::get-base-directory()}\Artifacts\Packages\ /t:Build /p:Configuration=Release" />

  <!--
    <exec program="${nugetPath}" commandline="pack NuGetPackages/MonoGame.Framework.Cardboard.nuspec        -OutputDirectory ${project::get-base-directory()}\Artifacts\Packages\  -BasePath .  -Version ${nugetPackageVersion}  -Properties Configuration=Release" />
  -->

  </target>


  <!-- Build targets for the various platforms. -->

  <target name="build_framework" description="Build framework">

      <exec program="dotnet" commandline="build src\Xna.Framework\Xna.Framework.csproj /t:restore" />
      <exec program="dotnet" commandline="build src\Xna.Framework.Content\Xna.Framework.Content.csproj /t:restore" />
      <exec program="dotnet" commandline="build src\Xna.Framework.Graphics\Xna.Framework.Graphics.csproj /t:restore" />
      <exec program="dotnet" commandline="build src\Xna.Framework.Audio\Xna.Framework.Audio.csproj /t:restore" />
      <exec program="dotnet" commandline="build src\Xna.Framework.Media\Xna.Framework.Media.csproj /t:restore" />

      <exec program="dotnet" commandline="build src\Xna.Framework\Xna.Framework.csproj /t:Build /p:Configuration=Release" />
      <exec program="dotnet" commandline="build src\Xna.Framework.Content\Xna.Framework.Content.csproj /t:Build /p:Configuration=Release" />
      <exec program="dotnet" commandline="build src\Xna.Framework.Graphics\Xna.Framework.Graphics.csproj /t:Build /p:Configuration=Release" />
      <exec program="dotnet" commandline="build src\Xna.Framework.Audio\Xna.Framework.Audio.csproj /t:Build /p:Configuration=Release" />
      <exec program="dotnet" commandline="build src\Xna.Framework.Media\Xna.Framework.Media.csproj /t:Build /p:Configuration=Release" />

  </target>
    
  <target name="build_ref" description="Build reference">

      <exec program="dotnet" commandline="build MonoGame.Framework\Xna.Framework.Ref.csproj /t:restore" />
      <exec program="dotnet" commandline="build MonoGame.Framework\Xna.Framework.Ref.csproj /t:Build /p:Configuration=Release" />

  </target>
  
  <target name="build_blazorGL" description="Build BlazorGL">

      <exec program="dotnet" commandline="build XNA.Framework.Blazor.sln /t:restore" />
      <exec program="dotnet" commandline="build XNA.Framework.Blazor.sln /t:Build /p:Configuration=Release" />
      
  </target>
  
  <target name="build_windows" description="Build Windows">

      <exec program="${msbuild17}" commandline="XNA.Framework.WindowsDX11.sln /t:restore" />
      <exec program="${msbuild17}" commandline="XNA.Framework.WindowsDX11.sln /t:Build /p:Configuration=Release /m" />
      
      <exec program="dotnet" commandline="build MonoGame.Framework\MonoGame.Framework.WindowsDX.csproj /t:restore" />
      <exec program="dotnet" commandline="build MonoGame.Framework\MonoGame.Framework.WindowsDX.csproj /t:Build /p:Configuration=Release" />

      <exec program="dotnet" commandline="build MonoGame.Framework\XNA.Framework.Oculus.OvrDX11.csproj /t:Build /p:Configuration=Release" />
      
  </target>
  
  <target name="build_desktopGL" description="Build DesktopGL">

      <exec program="dotnet" commandline="build MonoGame.Framework\XNA.Framework.DesktopGL.csproj /t:restore" />
      <exec program="dotnet" commandline="build MonoGame.Framework\XNA.Framework.DesktopGL.csproj /t:Build /p:Configuration=Release" />
      
  </target>

  <target name="build_ios" description="Build iOS">

    <!--
    <if test="${os == 'MacOS'}">
      <if test="${file::exists('/Developer/MonoTouch/MSBuild/Xamarin.ObjcBinding.CSharp.targets') 
               or file::exists('/Library/Frameworks/Mono.framework/External/xbuild/Xamarin/Xamarin.ObjcBinding.CSharp.targets')}">
        <exec program="msbuild" commandline="XNA.Framework.iOS.sln /t:Clean /p:Configuration=Release" />
        <exec program="msbuild" commandline="XNA.Framework.iOS.sln /t:Build /p:Configuration=Release" />
      </if>
    </if>
    -->

      <exec program="${msbuild17}" commandline="XNA.Framework.iOS.sln /t:restore" />
      <exec program="${msbuild17}" commandline="XNA.Framework.iOS.sln /t:Build /p:Configuration=Release" />

      <exec program="${msbuild17}" commandline='XNA.Framework.iOS.netcore.sln /t:Restore /p:Configuration=Release' />
      <exec program="${msbuild17}" commandline='XNA.Framework.iOS.netcore.sln /t:Build /p:Configuration=Release' />

  </target>

  <target name="build_android" description="Build Android">

      <!--
      <if test="${file::exists('C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Novell\Novell.MonoDroid.CSharp.targets')}">
        <exec program="${msbuild17}" commandline="XNA.Framework.Android.sln /t:Clean /p:Configuration=Release" />
        <exec program="${msbuild17}" commandline="XNA.Framework.Android.sln /t:Build /p:Configuration=Release" />
      </if>
      -->
      <if test="${file::exists('C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\MSBuild\Novell\Novell.MonoDroid.CSharp.targets')}">
        <exec program="${msbuild15}" commandline="XNA.Framework.Android.sln /t:Build /p:Configuration=Release" />
      </if>

      <exec program="${msbuild17}" commandline='XNA.Framework.Android.netcore.sln /t:Restore /p:Configuration=Release' />
      <exec program="${msbuild17}" commandline='XNA.Framework.Android.netcore.sln /t:Build /p:Configuration=Release' />

  </target>
  
  <target name="build_cardboard" description="Build Cardboard">
      <if test="${file::exists('C:\Program Files\Microsoft Visual Studio\2022\Community\MSBuild\Novell\Novell.MonoDroid.CSharp.targets')}">
        <exec program="${msbuild17}" commandline="XNA.Framework.Cardboard.sln /t:Build /p:Configuration=Release" />
      </if>
  </target>

  <target name="build_windowsUAP10" description="Build Windows 10 UAP">

      <!--
      <exec program="${msbuild17}" commandline='MonoGame.Framework\XNA.Framework.UAP.csproj /t:Restore /p:Configuration=Release' />
      <exec program="${msbuild17}" commandline='MonoGame.Framework\XNA.Framework.UAP.csproj /p:Configuration=Release' />
      -->
      <exec program="${msbuild17}" commandline='XNA.Framework.UAP.sln /t:Restore /p:Configuration=Release' />
      <exec program="${msbuild17}" commandline='XNA.Framework.UAP.sln /t:Build /p:Configuration=Release /p:Platform="Any CPU"' />

  </target>


  <!-- Run the unit tests... will fail if the code hasn't been built. -->
  <target name="run_tests" description="Run all the tests" >

    <if test="${os == 'Win32NT' and '$rununittests'=='true'  }">
      <exec program="MonoGame.Tests.exe" workingdir="Tests/bin/Windows/AnyCPU/Release/" basedir="Test/bin/Windows/AnyCPU/Release/"/>
    </if>

  </target>


  <!-- Generate the docs... will fail if the code hasn't been built. -->
  <target name="build_docs" description="Build the documentation." >
    <if test="${os == 'Win32NT' and '$runbuilddocs'=='true' }">
      <delete dir="${project::get-base-directory()}\Documentation\Output" />
      <exec program="SharpDoc.exe" basedir="ThirdParty\Dependencies\SharpDoc" commandline="-config Documentation\config.xml" />
    </if>
  </target>


  <!-- Create the installers... will fail if the code hasn't been built. -->
  <target name="build_installer" description="Build the installers." >
    <nant buildfile="Templates/VisualStudio2019/default.build" target="build" />
    <nant buildfile="Templates/VisualStudio2022/default.build" target="build" />
    <nant buildfile="Templates/default.build" target="build" />
    <nant buildfile="Templates/VisualStudioForMac/default.build" target="build" />
    <nant buildfile="Installers/default.build" target="build" />
  </target>

</project>
